AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: KC Authorizer Lambda main template

Parameters:
  EnvironmentId:
    Type: String
    Description: Environment ID

  AuthorizerAlias:
    Type: String
    Description: Authorizer Lambda Alias

  LogRetentionInDays:
    Type: String
    Description: Number of days to retain logs

  AuthAwsRegion:
    Type: String
    Description: AWS Region where the Auth stack is deployed

  AuthClientId:
    Type: String
    Description: Auth Client ID
  
  AuthSecretClient:
    Type: String
    Description: Auth Secret Client

  AuthUserPoolId:
    Type: String
    Description: Auth User Pool ID

Resources:
  AuthorizerLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub ${EnvironmentId}-authentication-layer
      ContentUri: ./layer
      CompatibleRuntimes:
        - nodejs18.x
      CompatibleArchitectures:
        - x86_64
      LicenseInfo: MIT
      RetentionPolicy: Retain


  AuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - events.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub ${EnvironmentId}-authentication-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:AssignPrivateIpAddresses"
                  - "ec2:UnassignPrivateIpAddresses"
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                  - "xray:GetSamplingRules"
                  - "xray:GetSamplingTargets"
                  - "xray:GetSamplingStatisticSummaries"
                  - "cognito-idp:AdminSetUserPassword"
                Resource: "*"



  AuthenticationUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: !Sub ${EnvironmentId}-authentication-usage-plan
      Description: Usage plan for authentication
      ApiStages:
        - ApiId: !GetAtt AuthenticationLambdas.Outputs.ApiId
          Stage: !GetAtt AuthenticationLambdas.Outputs.ApiStage

  AuthenticationApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Enabled: true
      Name: !Sub ${EnvironmentId}-authentication-api-key

  AuthenticationUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref AuthenticationApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref AuthenticationUsagePlan


  AuthenticationLambdas:
    Type: AWS::Serverless::Application
    Properties:
      Location: auth-functions-template.yaml
      Parameters:
        EnvironmentId: !Ref EnvironmentId
        LambdaAliasProduction: !Ref AuthorizerAlias
        AuthRoleArn: !GetAtt AuthorizerRole.Arn
        AuthLayer: !Ref AuthorizerLayer
        LogRetentionInDays: !Ref LogRetentionInDays
        AuthAwsRegion: !Ref AuthAwsRegion
        AuthClientId: !Ref AuthClientId
        AuthSecretClient: !Ref AuthSecretClient
        AuthUserPoolId: !Ref AuthUserPoolId


Outputs:
  AuthorizerLayer:
    Description: Authorizer Lambda Layer
    Value: !Ref AuthorizerLayer
  AuthorizerRole:
    Description: Authorizer Lambda Role
    Value: !Ref AuthorizerRole