openapi: 3.0.1
info:
  title: 
    Fn::Sub: ${EnvironmentId}-authentication-service
  version: 0.0.1
  description: |
    This is the api for authorizing users to access the labs

x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true
  params-only:
    validateRequestBody: false
    validateRequestParameters: true

paths:
  /auth/login:
    post:
      security:
        - api_key: [ ]
      x-amazon-apigateway-request-validator: all
      summary: Log in a user and return a JWT
      description: |
        Log in a user and return a JWT. The user is identified by 
        their email address and password from pool users Cognito.
      operationId: AuthLogIn
      parameters:
        - $ref: '#/components/parameters/x-request-id'
        - $ref: '#/components/parameters/x-ip-address'

      requestBody:
        description: |
          The user's email address and password
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLogInRequest'
      responses:
        201:
          description: OK
          headers:
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            x-jws-signature:
              $ref: '#/components/headers/x-jws-signature'
            Content-Language:
              $ref: '#/components/headers/Content-Language'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthLogInResponse'
                  
                
        400:
          $ref: '#/components/responses/Response400'
        401:
          $ref: '#/components/responses/Response401'
        403:
          $ref: '#/components/responses/Response403'
        404:
          $ref: '#/components/responses/Response404'
        409:
          $ref: '#/components/responses/Response409'
        429:
          $ref: '#/components/responses/Response429'
        500:
          $ref: '#/components/responses/Response500'

      x-amazon-apigateway-integration:
        httpMethod: POST
        type: aws
        timeoutInMillis: 20000
        uri:
         Fn::Join:
            - ""
            - - Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LogInLambda.Arn}:"
              - "${stageVariables.version_alias}/invocations"
        passThroughBehavior: when_no_templates
        requestTemplates:
          application/json: |-
            {
              "header": {
                "aws_request_id": "$context.requestId",
                "x_authorization": "$input.params().header.get('Authorization')",
                "x_request_id": "$input.params().header.get('x-request-id')",
                "x_ip_address": "$input.params().header.get('x-ip-address')"
              },
              "body" : $input.json('$'),
              "getBody": {
                "queries":{
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))"#if($foreach.hasNext),#end
                  #end
                },
                "params": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))"#if($foreach.hasNext),#end
                  #end
                }
              },
              "service": {
                "apiId": "$context.apiId",
                "operationId": "AuthLogIn"
              }
            }
        responses:
          default:
            statusCode: 201
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                $input.json('$.body')
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                 #set($res = $input.path('$'))
                 {"message": "The request is not well formed."}
          401:
            statusCode: 401
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                 #set($res = $input.path('$'))
                 {"message": "You are not authorized to perform this operation."}

          403:
            statusCode: 403
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                 #set($res = $input.path('$'))
                 {"message": "The request has been rejected."}

          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                 #set($res = $input.path('$'))
                 {"message": "The requested resource could not be found."}

          409:
            statusCode: 409
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                #set($cause = $input.path('$.cause'))
                {
                  "message": "The request could not be completed successfully.",
                  "error" : $cause
                }

          429:
            statusCode: 429
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                {"message": "The number of allowed requests has been exceeded."}

          500|.*timed.*:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                #set($cause = $input.path('$.cause'))
                 $cause.errorMessage


  /auth/change-password:
    post:
      security:
        - api_key: [ ]
      x-amazon-apigateway-request-validator: all
      summary: Change password of a user
      description: |
        Change password of a user
      operationId: AuthChangePassword
      parameters:
        - $ref: '#/components/parameters/x-request-id'
        - $ref: '#/components/parameters/x-ip-address'

      requestBody:
        description: |
          The request body must be a JSON object with the following properties:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        201:
          description: OK
          headers:
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            x-jws-signature:
              $ref: '#/components/headers/x-jws-signature'
            Content-Language:
              $ref: '#/components/headers/Content-Language'
          content:
            application/json:
              schema:
                type: object


        400:
          $ref: '#/components/responses/Response400'
        401:
          $ref: '#/components/responses/Response401'
        403:
          $ref: '#/components/responses/Response403'
        404:
          $ref: '#/components/responses/Response404'
        409:
          $ref: '#/components/responses/Response409'
        429:
          $ref: '#/components/responses/Response429'
        500:
          $ref: '#/components/responses/Response500'

      x-amazon-apigateway-integration:
        httpMethod: POST
        type: aws
        timeoutInMillis: 20000
        uri:
          Fn::Join:
            - ""
            - - Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChangePasswordLambda.Arn}:"
              - "${stageVariables.version_alias}/invocations"
        passThroughBehavior: when_no_templates
        requestTemplates:
          application/json: |-
            {
              "header": {
                "aws_request_id": "$context.requestId",
                "x_authorization": "$input.params().header.get('Authorization')",
                "x_request_id": "$input.params().header.get('x-request-id')",
                "x_ip_address": "$input.params().header.get('x-ip-address')"
              },
              "body" : $input.json('$'),
              "getBody": {
                "queries":{
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))"#if($foreach.hasNext),#end
                  #end
                },
                "params": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))"#if($foreach.hasNext),#end
                  #end
                }
              },
              "service": {
                "apiId": "$context.apiId",
                "operationId": "AuthLogIn"
              }
            }
        responses:
          default:
            statusCode: 201
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                $input.json('$.body')
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                {"message": "The request is not well formed."}
          401:
            statusCode: 401
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                {"message": "You are not authorized to perform this operation."}
          403:
            statusCode: 403
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                {"message": "The request has been rejected."}

          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                {"message": "The requested resource could not be found."}

          409:
            statusCode: 409
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                #set($cause = $input.path('$.cause'))
                {
                  "message": "The request could not be completed successfully.",
                  "error" : $cause
                }

          429:
            statusCode: 429
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                {"message": "The number of allowed requests has been exceeded."}

          500|.*timed.*:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                #set($cause = $input.path('$.cause'))
                 $cause.errorMessage
  
  /auth/sign-up:
    post:
      security:
        - api_key: [ ]
      x-amazon-apigateway-request-validator: all
      summary: Sign up a user
      description: |
        Sign up a user
      operationId: SignUp
      parameters:
        - $ref: '#/components/parameters/x-request-id'
        - $ref: '#/components/parameters/x-ip-address'

      requestBody:
        description: |
          The request body must be a JSON object with the following properties:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        201:
          description: OK
          headers:
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            x-jws-signature:
              $ref: '#/components/headers/x-jws-signature'
            Content-Language:
              $ref: '#/components/headers/Content-Language'
          content:
            application/json:
              schema:
                type: object


        400:
          $ref: '#/components/responses/Response400'
        401:
          $ref: '#/components/responses/Response401'
        403:
          $ref: '#/components/responses/Response403'
        404:
          $ref: '#/components/responses/Response404'
        409:
          $ref: '#/components/responses/Response409'
        429:
          $ref: '#/components/responses/Response429'
        500:
          $ref: '#/components/responses/Response500'

      x-amazon-apigateway-integration:
        httpMethod: POST
        type: aws
        timeoutInMillis: 20000
        uri:
          Fn::Join:
            - ""
            - - Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SignUpLambda.Arn}:"
              - "${stageVariables.version_alias}/invocations"
        passThroughBehavior: when_no_templates
        requestTemplates:
          application/json: |-
            {
              "header": {
                "aws_request_id": "$context.requestId",
                "x_authorization": "$input.params().header.get('Authorization')",
                "x_request_id": "$input.params().header.get('x-request-id')",
                "x_ip_address": "$input.params().header.get('x-ip-address')"
              },
              "body" : $input.json('$'),
              "getBody": {
                "queries":{
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))"#if($foreach.hasNext),#end
                  #end
                },
                "params": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))"#if($foreach.hasNext),#end
                  #end
                }
              },
              "service": {
                "apiId": "$context.apiId",
                "operationId": "SignUp"
              }
            }
        responses:
          default:
            statusCode: 201
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                $input.json('$.body')
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                {"message": "The request is not well formed."}
          401:
            statusCode: 401
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                {"message": "You are not authorized to perform this operation."}

          403:
            statusCode: 403
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                {"message": "The request has been rejected."}

          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                {"message": "The requested resource could not be found."}

          409:
            statusCode: 409
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                #set($cause = $input.path('$.cause'))
                {
                  "message": "The request could not be completed successfully.",
                  "error" : $cause
                }


          429:
            statusCode: 429
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                {"message": "The number of allowed requests has been exceeded."}

          500|.*timed.*:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                #set($cause = $input.path('$.cause'))
                 $cause.errorMessage

components:
  schemas:
    AuthLogInRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          minLength: 8
          maxLength: 20
      required:
        - username
        - password
    AuthLogInResponse:
      type: object
      properties:
        credentials:
          $ref: "#/components/schemas/AuthLoginCredentials"
        statusMessage:
          type: string

    
    AuthLoginCredentials:
      type: object
      properties:
        accessToken:
          type: string
          format: jwt
        refreshToken:
          type: string
          format: jwt
        idToken:
          type: string
      required:
        - accessToken
        - refreshToken
        - idToken

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: "The error message"
    AuthChangePasswordRequest:
      type: object
      properties:
        previousPassword:
          type: string
          minLength: 8
          maxLength: 20
        proposedPassword:
          type: string
          minLength: 8
          maxLength: 20
        token:
          type: string
      required:
        - previousPassword
        - proposedPassword
        - token

  headers:
    Content-Language:
      description: "The content language"
      schema:
        type: string
    
    x-jws-signature:
      description: "The JWS signature"
      schema:
        type: string

  parameters:
    x-request-id:
      name: "x-request-id"
      description: "The request ID"
      in: header
      required: true
      schema:
        type: string
    x-ip-address:
      name: "x-ip-address"
      description: "The IP address"
      in: header
      schema:
        type: string
    Authorization:
      name: "Authorization"
      description: "The authorization token"
      in: header
      required: true
      schema:
        type: string
  responses:
    Response400:
      description: "Bad request"
      headers:
        Content-Language:
          $ref: "#/components/headers/Content-Language"
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    
    Response401:
      description: "Unauthorized"
      headers:
        Content-Language:
          $ref: "#/components/headers/Content-Language"
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    Response403:
      description: "Forbidden"
      headers:
        Content-Language:
          $ref: "#/components/headers/Content-Language"
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    Response404:
      description: "Not found"
      headers:
        Content-Language:
          $ref: "#/components/headers/Content-Language"
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    Response409:
      description: "Conflict"
      headers:
        Content-Language:
          $ref: "#/components/headers/Content-Language"
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    Response429:
      description: "Too many requests"
      headers:
        Content-Language:
          $ref: "#/components/headers/Content-Language"
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    Response500:
      description: "Internal server error"
      headers:
        Content-Language:
          $ref: "#/components/headers/Content-Language"
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

  securitySchemes:
    api_key:
      type: apiKey
      in: header
      name: x-api-key
      description: 'API key or aborts with Unauthorized'